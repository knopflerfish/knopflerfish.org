<!--
  ** Copyright (c) 2003-2006, KNOPFLERFISH project
  ** All rights reserved.
  ** 
  ** Redistribution and use in source and binary forms, with or without 
  ** modification, are permitted provided that the following conditions 
  ** are met:
  ** 
  ** - Redistributions of source code must retain the above copyright notice, 
  **   this list of conditions and the following disclaimer. 
  ** 
  ** - Redistributions in binary form must reproduce the above copyright 
  **   notice, this list of conditions and the following disclaimer in 
  **   the documentation and/or other materials provided with the 
  **   distribution. 
  ** 
  ** - Neither the name of the KNOPFLERFISH project nor the names of its 
  **   contributors may be used to endorse or promote products derived 
  **   from this software without specific prior written permission. 
  ** 
  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  ** FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  ** COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  ** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  ** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  ** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  ** STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  ** OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

 <property name = "topdir"   location = "."/>
 <property name = "proj.dir" location = "."/>

 <!-- Special value to be used as the value for a bundle manifest    -->
 <!-- property that shall not be included in the generated manifest. -->
 <!-- DO NOT CHANGE THIS VALUE.                                      -->
 <property name="bundle.emptystring" value="[bundle.emptystring]"/>

 <!-- Map environment variables to properties starting with "sysprops."-->
 <property environment="sysprops"/>

 <property name="javac.target"        value="1.2"/>
 <property name="javac.source"        value="1.2"/>

 <!-- If set to "true" check that the bundle does not use any classes -->
 <!-- outside the specified Execution Environment.                    -->
 <property name="ee.check.foundation" value="false"/>

 <!-- Shall source code be included into the bundle jar or not. -->
 <property name="xinclude.source"      value="true"/>

 <!-- The reverse domain name of the bundle vendor.              -->
 <!-- Used in the default definition of the bundle symbolic name -->
 <!-- and the bundle UUID.                                       -->
 <property name="domain.reverse"      value="org.knopflerfish"/>


 <!-- Bundle manifest attributes corresponds to ant properties with  -->
 <!-- names starting with "bmfa." (BundleManiFestAttribute) followed -->
 <!-- by the manifest attribute name.                                -->
 <property name="bundle.mf.attr.prefix"   value="bmfa."/>
 <!-- Bundle manifest attribute properties can either be specified in -->
 <!-- the build.xml before including this file, or creating a template-->
 <!-- manifest file, named bundle.manifest, in the same directory as  -->
 <!-- the build.xml. Such template manifest files are typically       -->
 <!-- created by the Knopflefish eclipse plugin.                      --> 
 <property name="bundlemanifest.template"
           location="${proj.dir}/bundle.manifest"/>

 <!-- A manifest attribute with the special value                      -->
 <!-- "${bundle.emptystring}" will not be included in the generated    -->
 <!--  manifest.                                                       -->
 <property name="bmfa.Application-Icon"   value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-Activator"   value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-APIVendor"   value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-Category"    value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-Classpath"   value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-Config"      value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-ContactAddress"
                                          value="http://www.knopflerfish.org"/>
 <property name="bmfa.Bundle-Copyright"   value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-Description" value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-DocURL"      value="http://www.knopflerfish.org"/>
 <property name="bmfa.Bundle-Localization"    value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-ManifestVersion" value = "2"/>
 <property name="bmfa.Bundle-Name"        value="${ant.project.name}"/>
 <property name="bmfa.Bundle-NativeCode"  value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-RequiredExecutionEnvironment"
           value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-SubversionURL"
           value="https://www.knopflerfish.org/svn/"/>
 <property name="bmfa.Bundle-SymbolicName"
           value="${domain.reverse}.bundle.${ant.project.name}"/>
 <property name="bmfa.Bundle-UUID"
           value="${domain.reverse}:${ant.project.name}:${bmfa.Bundle-Version}"/>
 <property name="bmfa.Bundle-UpdateLocation"  value="${bundle.emptystring}"/>
 <property name="bmfa.Bundle-Vendor"      value="Knopflerfish"/>
 <property name="bmfa.Bundle-Version"     value="${bundle.emptystring}"/>
 <property name="bmfa.DynamicImport-Package"  value="${bundle.emptystring}"/>
 <property name="bmfa.Export-Package"     value="${bundle.emptystring}"/>
 <property name="bmfa.Export-Service"     value="${bundle.emptystring}"/>
 <property name="bmfa.Fragment-Host"      value="${bundle.emptystring}"/>
 <property name="bmfa.Import-Package"     value="${bundle.emptystring}"/>
 <property name="bmfa.Import-Service"     value="${bundle.emptystring}"/>
 <property name="bmfa.Require-Bundle"     value="${bundle.emptystring}"/>
 <property name="bmfa.Service-Component"  value="${bundle.emptystring}"/>


 <!-- Old obsolete bundel manifest properties, renamed to bmfa.XXX -->
 <!--
 <property name="bundle.category"       value="${bundle.emptystring}"/>
 <property name="bundle.name"           value="${ant.project.name}"/>
 <property name="bundle.version"        value="${bundle.emptystring}"/>
 <property name="bundle.manifest.version" value="2"/>
 <property name="bundle.classpath"      value="${bundle.emptystring}"/>
 <property name="bundle.contactaddress" value="http://www.knopflerfish.org"/>
 <property name="bundle.copyright"      value="${bundle.emptystring}"/>
 <property name="bundle.description"    value="${bundle.emptystring}"/>
 <property name="bundle.docurl"         value="http://www.knopflerfish.org"/>
 <property name="bundle.localization"   value="${bundle.emptystring}"/>
 <property name="bundle.nativecode"     value="${bundle.emptystring}"/>
 <property name="bundle.requiredEE"     value="${bundle.emptystring}"/>
 <property name="bundle.symbolicname"   value="${domain.reverse}.bundle.${ant.project.name}"/>
 <property name="bundle.update.location" value="${bundle.emptystring}"/>
 <property name="bundle.vendor"         value="Knopflerfish"/>
 <property name="dynamicimport.package" value="${bundle.emptystring}"/>
 <property name="export.service"        value="${bundle.emptystring}"/>
 <property name="import.service"        value="${bundle.emptystring}"/>
 <property name="export.package"        value=""/>
 <property name="import.package"        value=""/>
 <property name="fragment.host"         value="${bundle.emptystring}"/>
 <property name="require.bundle"        value="${bundle.emptystring}"/>
 <property name="bundle.uuid"           value="${domain.reverse}:${ant.project.name}:${bundle.version}"/>
 <property name="bundle.config"         value="${bundle.emptystring}"/>
 <property name="bundle.icon"           value="${bundle.emptystring}"/>
 <property name="bundle.subversionurl"  value="https://www.knopflerfish.org/svn/"/>
 <property name="bundle.apivendor"      value="${bundle.emptystring}"/>
 <property name="service.component"     value="${bundle.emptystring}"/>
 -->

 <!--   -->
 <!--   -->

 <!-- End of properties used as value for bundle manifest headers.     -->



 <property name="console.host"        value="localhost"/>
 <property name="console.port"        value="23"/>
 <property name="console.user"        value="admin"/>
 <property name="console.pwd"         value="admin"/>
 <property name="console.welcome"     value="Knopflerfish OSGi console"/>
 <property name="console.loginok"     value="'quit' to end session"/>


 <property name="http.host"          value="localhost"/>
 <property name="http.port"          value="8080"/>
 <property name="junit.runner.class" value="junit.swingui.TestRunner"/>
 <property name="junit.formatter"    value="plain"/>
 <property name="junit.outfile"      value="junit"/>


 <property name = "src.dir"        location = "src"/>
 <property name = "resources.dir"  location = "resources"/>

 <property name = "outdir"   location = "${topdir}/out/${ant.project.name}"/>
 <property name = "jardir"   location = "${topdir}/jars/${ant.project.name}"/>

 <property name = "exported.file" location = "${topdir}/out/exported.txt"/>
 <property name = "sources.file"  location = "${topdir}/out/sources.txt"/>

 <property name = "classes.out.dir"     location = "${outdir}/classes"/>

 <property name = "install_url_prefix"  value = "file:"/>

 <property name = "bundle.build.lib"    value = "false"/>
 <property name = "bundle.build.api"    value = "true"/>
 <property name = "bundle.build.impl"   value = "true"/>
 <property name = "bundle.build.all"    value = "true"/>

 <!-- Bundles that both export packages and provides implementations -->
 <!-- shall have the implicitImport flag set in the bundleinfo task. -->
 <property name = "bundle.implicit.imports.lib"   value = "false"/>
 <property name = "bundle.implicit.imports.api"   value = "false"/>
 <property name = "bundle.implicit.imports.impl"  value = "false"/>
 <property name = "bundle.implicit.imports.all"   value = "true"/>

 <!-- First part of the suffix to inser right before "-jar" in the -->
 <!-- name of jar files to create.                                 -->
 <!-- E.g. The full name of the impl-jar will be on the form:      -->
 <!--${jardir}/${ant.project.name}${impl.suffix.name}-${bmfa.Bundle-Version}-->
 <property name="lib.suffix.name" value=""/>
 <property name="api.suffix.name" value="_api"/>
 <property name="impl.suffix.name" value=""/>
 <property name="all.suffix.name" value="_all"/>

 <!-- Manifest attributes that shall not be present in the manifest -->
 <!-- of the named bundle kind. The value is a comma separated list -->
 <!-- of manifest attibute names to weed out from the generated manifest. -->
 <property name="attrs.to.skip.lib"
   value="Bundle-Activator,Export-Service,Import-Service,Bundle-Config"/>
 <property name="attrs.to.skip.api"
   value="Bundle-Activator,Export-Service,Import-Service,Bundle-Config"/>
 <property name="attrs.to.skip.impl" value="Export-Package"/>
 <property name="attrs.to.skip.all"  value=""/>
 
 <!-- Let the bundlemanifest task print the name of the activator -->
 <!-- and the exported and imported packages on the console.      -->
 <property name="bundlemanifest.verbose" value="true"/>

 <path id = "framework.path">
  <pathelement location = "${topdir}/framework.jar"/>
 </path>

 <path id = "bundle.path">
   <path refid = "framework.path"/>
   <path refid = "bundle.api.path"/>
   <path refid = "bundle.compile.path"/>
 </path>

 <import file="${topdir}/../ant/bundletasks.xml"/>

 <target name="init"
         depends="setup_build,check_bcel,bundle_tasks,setup_manifest_props">
   <tstamp>
    <format property = "bundle.date" 
            pattern  = "EE MMMM d yyyy, HH:mm:ss"
            locale   = "en"/>
   </tstamp>
 </target>

 <!-- This target must be called before using any of the bmfa.* properties.-->
 <target name="setup_manifest_props">
   <!-- If old bundle manifest property names are in use fail! -->
   <fail if="bundle.category" message="bundle.category->bmfa.Bundle-Category"/>
   <fail if="bundle.name" message="bundle.name->bmfa.Bundle-Name"/>
   <fail if="bundle.version" message="bundle.version->bmfa.Bundle-Version"/>
   <fail if="bundle.manifest.version"
         message="bundle.manifest.version->bmfa.Bundle-ManifestVersion"/>
   <fail if="bundle.classpath"
         message="bundle.classpath->bmfa.Bundle-Classpath"/>
   <fail if="bundle.contactaddress"
         message="bundle.contactaddress->bmfa.Bundle-ContactAddress"/>
   <fail if="bundle.copyright"
         message="bundle.copyright->bmfa.Bundle-Copyright"/>
   <fail if="bundle.description"
         message="bundle.description->bmfa.Bundle-Description"/>
   <fail if="bundle.docurl" message="bundle.docurl->bmfa.Bundle-DocURL"/>
   <fail if="bundle.localization"
         message="bundle.localization->bmfa.Bundle-Localization"/>
   <fail if="bundle.nativecode"
         message="bundle.nativecode->bmfa.Bundle-NativeCode"/>
   <fail if="bundle.requiredEE"
         message="bundle.requiredEE->bmfa.Bundle-RequiredExecutionEnvironment"/>
   <fail if="bundle.symbolicname"
         message="bundle.symbolicname->bmfa.Bundle-SymbolicName"/>
   <fail if="bundle.update.location"
         message="bundle.update.location->bmfa.Bundle-UpdateLocation"/>
   <fail if="bundle.vendor" message="bundle.vendor->bmfa.Bundle-Vendor"/>
   <fail if="dynamicimport.package"
         message="bundle.dynamicimport.package->bmfa.DynamicImport-Package"/>
   <fail if="export.service" message="export.service->bmfa.Export-Service"/>
   <fail if="import.service" message="import.service->bmfa.Import-Service"/>
   <fail if="export.package" message="export.package->bmfa.Export-Package"/>
   <fail if="import.package" message="import.package->bmfa.Import-Package"/>
   <fail if="fragment.host"  message="fragment.host->bmfa.Fragment-Host"/>
   <fail if="require.bundle" message="require.bundle->bmfa.Require-Bundle"/>
   <fail if="bundle.uuid"    message="bundle.uuid->bmfa.Bundle-UUID"/>
   <fail if="bundle.config"  message="bundle.config->bmfa.Bundle-Config"/>
   <fail if="bundle.icon"    message="bundle.icon->bmfa.Application-Icon"/>
   <fail if="bundle.subversionurl"
         message="bundle.subversionurl->bmfa.Bundle-SubversionURL"/>
   <fail if="bundle.apivendor"
         message="bundle.apivendor->bmfa.Bundle-APIVendor"/>
   <fail if="service.component"
         message="service.component->bmfa.Service-Component"/>

   <!-- Update value of all bundle manifest properties (bmfa.*) based  -->
   <!-- on their values in the manifest template file (if present). -->
   <bundlemanifest mode="templateOnly"
                   attributePropertyPrefix = "${bundle.mf.attr.prefix}"
                   templateFile="${bundlemanifest.template}">
   </bundlemanifest>

   <!-- Defines properties that depends on bundle manifest header values. -->
   <property name="impl.suffix"
             value="${impl.suffix.name}-${bmfa.Bundle-Version}"/>
   <property name="impl.jar"     
             location="${jardir}/${ant.project.name}${impl.suffix}.jar"/>
   <property name="api.suffix"
             value="${api.suffix.name}-${bmfa.Bundle-Version}"/>
   <property name="api.jar"
             location="${jardir}/${ant.project.name}${api.suffix}.jar"/>
   <property name="lib.suffix"
             value="${lib.suffix.name}-${bmfa.Bundle-Version}"/>
   <property name="lib.jar"     
             location="${jardir}/${ant.project.name}${lib.suffix}.jar"/>
   <property name="all.suffix"
             value="${all.suffix.name}-${bmfa.Bundle-Version}"/>
   <property name="all.jar"
             location = "${jardir}/${ant.project.name}${all.suffix}.jar"/>

   <path id = "bundle.api.path">
     <pathelement location = "${api.jar}"/>
   </path>
 </target>

 <target name="install_netcomponents">
   <antcall target="download_netcomponents'" />
   <antcall target="unpack_netcomponents'"   />
 </target>

 <target name="download_netcomponents">
   <get src = "http://www.savarese.org/oro/downloads/NetComponents-1.3.8.zip" 
        dest = "${sysprops.ANT_HOME}/NetComponents-1.3.8.zip"/>
 </target>

 <target name="unpack_netcomponents">
   <unzip src = "${sysprops.ANT_HOME}/NetComponents-1.3.8.zip"
         dest = "${sysprops.ANT_HOME}/lib">
    <patternset>
     <include name="NetComponents-1.3.8a/NetComponents.jar"/>
    </patternset>
   </unzip>

   <move file   = "${sysprops.ANT_HOME}/lib/NetComponents-1.3.8a/NetComponents.jar" 
         tofile = "${sysprops.ANT_HOME}/lib/NetComponents.jar"/>

 </target>


 <target name = "all" depends = "init">
   <antcall target = "try_bundle.custom.pre"/>
   <antcall target = "jars"/>
   <antcall target = "try_bundle.custom.post"/>
 </target>


 <target name        = "try_bundle.custom.pre"
         if          = "do.bundle.custom.pre">
   <antcall target = "bundle.custom.pre"/>
 </target>

 <target name        = "try_bundle.custom.post"
         if          = "do.bundle.custom.post">
   <antcall target = "bundle.custom.post"/>
 </target>

 <target name        = "compile" 
         description = "compiles all java sources">

    <mkdir dir = "${classes.out.dir}"/>

    <javac destdir       = "${classes.out.dir}" 
           debug         = "on"
           srcdir        = "${src.dir}"
           target        = "${javac.target}"
           source        = "${javac.source}"
           classpathref  = "bundle.path"
           includes      = "${impl.pattern},${api.pattern}"
    >
   </javac>
  </target>

 <target name        = "compile_api" 
         description = "compiles only api java sources">

    <mkdir dir = "${classes.out.dir}"/>

    <javac destdir       = "${classes.out.dir}" 
           debug         = "on"
           srcdir        = "${src.dir}"
           classpathref  = "bundle.path"
           target        = "${javac.target}"
           source        = "${javac.source}"
           includes      = "${api.pattern}">
   </javac>
  </target>

 <target name        = "jars"
         description = "compile all jars">
  <antcall target = "jar_api0"/>
  <antcall target = "jar_lib"/>
  <antcall target = "jar_impl"/>
  <antcall target = "jar_all0"/>
 </target>

 <target name    = "jar_api0" 
         if      = "api.pattern">
   <antcall target = "jar_api"/>
 </target>

 <target name    = "jar_all0" 
         if      = "api.pattern">
   <antcall target = "jar_all"/>
 </target>

 <!-- set up build conditions -->
 <target name = "setup_build">

  <condition property="do_build_lib">
   <equals arg1="${bundle.build.lib}" arg2="true"/>
  </condition>

  <condition property="do_build_api">
   <equals arg1="${bundle.build.api}" arg2="true"/>
  </condition>

  <condition property="do_build_impl">
   <equals arg1="${bundle.build.impl}" arg2="true"/>
  </condition>

  <condition property="do_build_all">
   <equals arg1="${bundle.build.all}" arg2="true"/>
  </condition>

<!--
  <echo message="do_build_lib  = ${do_build_lib}"/>
  <echo message="do_build_api  = ${do_build_api}"/>
  <echo message="do_build_impl = ${do_build_impl}"/>
  <echo message="do_build_all  = ${do_build_all}"/>
-->

  <!-- If a template manifest file exists use it and ignore       -->
  <!-- manifest headers defined via properties in the build file. -->
  <condition property="bundlemanifest.mode" value="update">
    <and>
      <not><isset property="bundlemanifest.mode"/></not>
      <available type="file" file="${bundlemanifest.template}"/>
    </and>
  </condition>
  <property name = "bundlemanifest.mode" value="replace"/>
 </target>


 <target name    = "jar_impl" 
         if      = "do_build_impl">
  <echo message = "${impl.jar}"/>

  <antcall target = "compile"/>

  <bundleinfo activator = "bmfa.Bundle-Activator" 
              imports   = "bmfa.Import-Package"
              implicitImports   = "${bundle.implicit.imports.impl}"
              checkFoundationEE = "${ee.check.foundation}"
  >
   <fileset dir      = "${classes.out.dir}" 
            includes = "${impl.pattern}">
   </fileset>
  </bundleinfo>

  <mkdir dir = "${jardir}"/>
  <antcall target="make_resource_dir"/>

  <bundlemanifest mode="${bundlemanifest.mode}"
                  kind="impl"
                  mainAttributesToSkip="${attrs.to.skip.impl}"
                  attributePropertyPrefix="${bundle.mf.attr.prefix}"
                  templateFile="${bundlemanifest.template}"
                  verbose="${bundlemanifest.verbose}"
                  file="${outdir}/impl.mf">
    <attribute name="Build-Date"       value="${bundle.date}"/>
    <attribute name="Built-From"       value="${proj.dir}"/>
  </bundlemanifest>

  <jar basedir  = "${classes.out.dir}"
       jarfile  = "${impl.jar}"
       includes = "${impl.pattern}"
       excludes = "**/pspbrwse.jbf"
       manifest = "${outdir}/impl.mf"
    >
     <fileset dir = "${resources.dir}"/>
  </jar>  
 </target>

 <target name    = "add_src_all"
         if      = "include.source">

  <jar basedir  = "${classes.out.dir}"
       jarfile  = "${all.jar}"
       includes = "${api.pattern},${impl.pattern}"
       update   = "true">

     <zipfileset dir      = "${src.dir}"
              includes = "**/*.java"
              prefix = "OSGI-OPT/src"
     />     
  </jar>
 </target>

 <target name    = "add_src_lib"
         if      = "include.source">

 <jar basedir  = "${classes.out.dir}"
       jarfile  = "${impl.jar}"
       includes = "${api.pattern}"
       update   = "true">

     <zipfileset dir      = "${src.dir}"
              includes = "**/*.java"
              prefix = "OSGI-OPT/src"
     />     
  </jar>
 </target>

 <target name    = "jar_api" 
         depends = "init,bundle_tasks" 
         if      = "do_build_api">
  <echo message = "${api.jar}"/>

  <antcall target = "compile_api"/>

  <!-- Avoid importing packages only required by the implementation.-->
  <property name="import.package.api" value="${bundle.emptystring}"/>
  <bundleinfo exports = "bmfa.Export-Package" 
              imports = "import.package.api"
              implicitImports   = "${bundle.implicit.imports.api}"
              checkFoundationEE = "${ee.check.foundation}"
  >
   <fileset dir      = "${classes.out.dir}" 
            includes = "${api.pattern}">
   </fileset>
  </bundleinfo>

  <mkdir dir = "${jardir}"/>

  <bundlemanifest mode="${bundlemanifest.mode}"
                  kind="api"
                  mainAttributesToSkip = "${attrs.to.skip.api}"
                  attributePropertyPrefix = "${bundle.mf.attr.prefix}"
                  templateFile="${bundlemanifest.template}"
                  verbose="${bundlemanifest.verbose}"
                  file="${outdir}/api.mf">
    <attribute name="Build-Date"       value="${bundle.date}"/>
    <attribute name="Built-From"       value="${proj.dir}"/>
    <attribute name="Import-Package"   value="${import.package.api}"/>
  </bundlemanifest>

  <jar basedir  = "${classes.out.dir}"
       jarfile  = "${api.jar}"
       includes = "${api.pattern}"
       manifest = "${outdir}/api.mf"
    >
    </jar>  

 </target>

 <target name    = "jar_lib" 
         depends = "init,bundle_tasks" 
         if      = "do_build_lib">
  <echo message = "${lib.jar}"/>

  <antcall target = "compile_api"/>

  <bundleinfo exports = "bmfa.Export-Package" 
              imports = "bmfa.Import-Package"
              implicitImports   = "${bundle.implicit.imports.lib}"
              checkFoundationEE = "${ee.check.foundation}"
  >
   <fileset dir      = "${classes.out.dir}" 
            includes = "${api.pattern}">
   </fileset>
  </bundleinfo>

  <mkdir dir = "${jardir}"/>
  <antcall target="make_resource_dir"/>

  <bundlemanifest mode="${bundlemanifest.mode}"
                  kind="lib"
                  mainAttributesToSkip = "${attrs.to.skip.lib}"
                  attributePropertyPrefix = "${bundle.mf.attr.prefix}"
                  templateFile="${bundlemanifest.template}"
                  verbose="${bundlemanifest.verbose}"
                  file="${outdir}/lib.mf">
    <attribute name="Build-Date"     value="${bundle.date}"/>
    <attribute name="Built-From"     value="${proj.dir}"/>
    <attribute name="Export-Package" value="${bmfa.Export-Package}"/>
  </bundlemanifest>

  <jar basedir  = "${classes.out.dir}"
       jarfile  = "${lib.jar}"
       includes = "${api.pattern}"
       manifest = "${outdir}/lib.mf"
    >
     <fileset dir = "${resources.dir}"/>
  </jar>  

  <antcall target="add_src_lib"/>

 </target>

 <target name = "make_resource_dir" if = "resources.dir">
   <mkdir dir = "${resources.dir}"/>
 </target>

 <target name    = "jar_all" 
         depends = "init,bundle_tasks" 
         if      = "do_build_all">
  <echo message = "${all.jar}"/>

  <antcall target = "compile"/>

  <bundleinfo exports   = "bmfa.Export-Package"
              checkFoundationEE = "${ee.check.foundation}"
  >
   <fileset dir      = "${classes.out.dir}" 
            includes = "${api.pattern}">
   </fileset>
  </bundleinfo>

  <bundleinfo activator = "bmfa.Bundle-Activator" 
              imports   = "bmfa.Import-Package"
              exports   = "bmfa.Export-Package"
              implicitImports   = "${bundle.implicit.imports.all}"
              checkFoundationEE = "${ee.check.foundation}"
  >
   <fileset dir      = "${classes.out.dir}" 
            includes = "${impl.pattern}">
   </fileset>
  </bundleinfo>

  <mkdir dir = "${jardir}"/>
  <antcall target="make_resource_dir"/>

  <bundlemanifest mode="${bundlemanifest.mode}"
                  kind=""
                  mainAttributesToSkip = "${attrs.to.skip.all}"
                  attributePropertyPrefix = "${bundle.mf.attr.prefix}"
                  templateFile="${bundlemanifest.template}"
                  verbose="${bundlemanifest.verbose}"
                  file="${outdir}/all.mf">
    <attribute name="Build-Date"       value="${bundle.date}"/>
    <attribute name="Built-From"       value="${proj.dir}"/>
  </bundlemanifest>

  <jar basedir  = "${classes.out.dir}"
       jarfile  = "${all.jar}"
       compress = "true"
       includes = "${api.pattern},${impl.pattern}"
       excludes = "**/pspbrwse.jbf"
       manifest = "${outdir}/all.mf"
    >
     <fileset dir = "${resources.dir}"/>
    </jar>
    
   <antcall target = "add_src_all"/>
 </target>

 <target name="check_telnet">
   <available classname = "com.oroinc.net.telnet.TelnetCommand" 
              property  = "telnet.available"/>

   <fail unless  = "telnet.available" 
         message = "Telnet lib is not available. Please download from http://www.savarese.org/oro/downloads/index.html#NetComponents and install in $$ANT_HOME/lib. You can also try  'ant install_netcomponents'"/>
 </target>

 <target name="install"
         depends="init"
         description="Install all.jar using telnet console">
   <antcall target="send_console_cmd">
    <param name  = "cmd"
           value = "/fr install ${install_url_prefix}${all.jar}"/>
   </antcall>

   <!-- give it a chance to succeed -->
   <sleep seconds="5"/>
 </target>

 <target name="install_impl"
         depends="init"
         description="Install impl.jar using telnet console">
   <antcall target="send_console_cmd">
    <param name  = "cmd"
           value = "/fr install ${install_url_prefix}${impl.jar}"/>
   </antcall>

   <!-- give it a chance to succeed -->
   <sleep seconds="5"/>
 </target>

 <target name="stop" 
         depends="init"
         description="Stop bmfa.Bundle-Name using telnet console">
   <antcall target="send_console_cmd">
    <param name  = "cmd"
           value = "/fr stop &#34;${bmfa.Bundle-Name}&#34;"/>
   </antcall>
 </target>

 <target name="start" 
         depends="init"
         description="Start bmfa.Bundle-Name using telnet console">
   <antcall target="send_console_cmd">
    <param name  = "cmd"
           value = "/fr start &#34;${bmfa.Bundle-Name}&#34;"/>
   </antcall>
 </target>

 <target name="update" 
         depends="init"
         description="Update bmfa.Bundle-Name using telnet console">
   <antcall target="send_console_cmd">
    <param name  = "cmd"
           value = "/fr update &#34;${bmfa.Bundle-Name}&#34;"/>
   </antcall>
 </target>

 <target name="uninstall" 
         depends="init"
         description="Uninstall bmfa.Bundle-Name using telnet console">
   <antcall target="send_console_cmd">
    <param name  = "cmd"
           value = "/fr uninstall &#34;${bmfa.Bundle-Name}&#34;"/>
   </antcall>
 </target>

 <target name="send_console_cmd" depends="check_telnet"
 >
  <telnet port     = "${console.port}" 
          server   = "${console.host}"
          timeout  = "20">
   <read string="${console.welcome}"/>
   <read>ogin:</read>
   <write echo="true">${console.user}</write>
   <read>assword:</read>
   <write echo="false">${console.pwd}</write>
   <read string="${console.loginok}"/>
   <write>${cmd}</write>
   <read/>
 </telnet>
</target>


  <target name="junit_ext" 
          description="Runs remote JUnit test using external runner">

   <fail unless="test.id" message="test.id must be set to test suite id"/>


   <java classname="${junit.runner.class}" 
         fork="yes"
   >
    <classpath>
      <path location="${topdir}/jars/junit/junit_all-1.0.0.jar"/>
      <path refid="bundle.compile.path"/>
    </classpath>

    <sysproperty key   = "suite.url" 
                 value = "http://${http.host}:${http.port}/junit?id=${test.id}"/>
    <arg value="org.knopflerfish.service.junit.client.JUnitClient"/>
   </java>
  </target>

  <target name="junit_ant"
          description="Runs remote JUnit test using Ant junit task">

   <fail unless="test.id" message="test.id must be set to test suite id"/>

   <echo message = "JUnit output file is '${junit.outfile}'"/> 
   <junit fork         = "yes" 
          showoutput   = "true" 
          printsummary = "true">

     <sysproperty key   = "suite.url" 
                  value = "http://${http.host}:${http.port}/junit?id=${test.id}"/>

     <classpath>
       <path location="${topdir}/jars/junit/junit_all-1.0.0.jar"/>
       <path refid="bundle.compile.path"/>
     </classpath>

     <formatter type="${junit.formatter}"/>

     <test name    = "org.knopflerfish.service.junit.client.JUnitClient" 
           outfile = "${junit.outfile}"/>
   </junit>
  </target>

 <target name = "clean" description = "Removes all files in utput directory">
  <delete dir = "${outdir}"/>
  <delete dir = "${jardir}"/>
 </target>
