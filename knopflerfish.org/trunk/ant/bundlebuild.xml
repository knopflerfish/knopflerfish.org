<?xml version="1.0" encoding="UTF-8"?>
<!--
  ** Copyright (c) 2003-2009, KNOPFLERFISH project
  ** All rights reserved.
  **
  ** Redistribution and use in source and binary forms, with or without
  ** modification, are permitted provided that the following conditions
  ** are met:
  **
  ** - Redistributions of source code must retain the above copyright notice,
  **   this list of conditions and the following disclaimer.
  **
  ** - Redistributions in binary form must reproduce the above copyright
  **   notice, this list of conditions and the following disclaimer in
  **   the documentation and/or other materials provided with the
  **   distribution.
  **
  ** - Neither the name of the KNOPFLERFISH project nor the names of its
  **   contributors may be used to endorse or promote products derived
  **   from this software without specific prior written permission.
  **
  ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  ** FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  ** COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  ** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  ** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  ** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  ** STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  ** OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<project name="bundlebuild" basedir=".">

  <dirname  property="ant.dir" file="${ant.file.bundlebuild}"/>
  <property name="osgi.dir"    location="${ant.dir}/../osgi"/>
  <property name="proj.dir"    location="."/>
  <property name="topdir"      location="${osgi.dir}"/>

  <!-- Special value to be used as the value for a bundle manifest      -->
  <!-- properties that shall not be included in the generated manifest. -->
  <!-- DO NOT CHANGE THIS VALUE.                                        -->
  <property name="bundle.emptystring" value="[bundle.emptystring]"/>

  <!-- Map environment variables to properties starting with "sysprops."-->
  <property environment="sysprops"/>

  <property name="javac.target"       value="1.2"/>
  <property name="javac.source"       value="1.2"/>

  <!-- If set to "true" check that the bundle does not use any classes -->
  <!-- outside the specified Execution Environment.                    -->
  <property name="ee.check.foundation" value="false"/>

  <!-- Shall source code be included into the bundle jar or not. -->
  <property name="include.source"      value="false"/>

  <!-- The reverse domain name of the bundle vendor.              -->
  <!-- Used in the default definition of the bundle symbolic name -->
  <!-- and the bundle UUID.                                       -->
  <property name="domain.reverse"      value="org.knopflerfish"/>


  <!-- Import-Package / Export-Package manifest headers that are found -->
  <!-- invalid by the bundleinfo-task shall trigger build error.      -->
  <property name="bundleinfo.failOnExports" value="true"/>
  <property name="bundleinfo.failOnImports" value="true"/>
  <property name="bundleinfo.uses"          value="true"/>

  <!-- Bundle manifest attributes corresponds to ant properties with  -->
  <!-- names starting with "bmfa." (short for BundleManiFestAttribute)-->
  <!-- followed by the manifest attribute name.                       -->
  <property name="bundle.mf.attr.prefix"   value="bmfa."/>

  <!-- Bundle manifest attribute properties can either be specified in -->
  <!-- the build.xml before importing this file, or by creating a      -->
  <!-- template manifest file, named "bundle.manifest", in the same    -->
  <!-- directory as the build.xml. Such template manifest files are    -->
  <!-- typically created by the Knopflefish eclipse plugin.            -->
  <property name="bundlemanifest.template"
            location="${proj.dir}/bundle.manifest"/>

  <!-- Set up default values for Bundle manifest attribute properties. -->
  <property name="bmfa.Bundle-ManifestVersion" value="2"/>
  <property name="bmfa.Bundle-Name"            value="${ant.project.name}"/>
  <property name="bmfa.Bundle-Version"         value="0.0.0"/>
  <property name="bmfa.Bundle-SymbolicName"
            value="${domain.reverse}.bundle.${ant.project.name}"/>
  <property name="bmfa.Bundle-Classpath"       value="."/>
  <property name="bmfa.Bundle-Vendor"          value="Knopflerfish"/>
  <property name="bmfa.Bundle-ContactAddress"
            value="http://www.knopflerfish.org"/>
  <property name="bmfa.Bundle-DocURL"
            value="http://www.knopflerfish.org"/>
  <property name="bmfa.Bundle-SubversionURL"
            value="https://www.knopflerfish.org/svn/"/>
  <property name="bmfa.Bundle-UUID"
            value="${domain.reverse}:${ant.project.name}:${bmfa.Bundle-Version}"/>

  <!-- Define all other known bundle mainfest attribute properties with -->
  <!-- the special empty value so that we do not end up with headers    -->
  <!-- like                                                             -->
  <!-- Import-Package: ${bmfa.Import-Package}                           -->
  <!-- in the generated manifest file.                                  -->
  <property name="bmfa.Application-Icon"       value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-Activator"       value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-APIVendor"       value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-Category"        value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-Config"          value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-Copyright"       value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-Description"     value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-Localization"    value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-NativeCode"      value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-RequiredExecutionEnvironment"
            value="${bundle.emptystring}"/>
  <property name="bmfa.Bundle-UpdateLocation"  value="${bundle.emptystring}"/>
  <property name="bmfa.DynamicImport-Package"  value="${bundle.emptystring}"/>
  <property name="bmfa.Export-Package"         value="${bundle.emptystring}"/>
  <property name="bmfa.Export-Service"         value="${bundle.emptystring}"/>
  <property name="bmfa.Fragment-Host"          value="${bundle.emptystring}"/>
  <property name="bmfa.Import-Package"         value="${bundle.emptystring}"/>
  <property name="bmfa.Import-Service"         value="${bundle.emptystring}"/>
  <property name="bmfa.Require-Bundle"         value="${bundle.emptystring}"/>
  <property name="bmfa.Service-Component"      value="${bundle.emptystring}"/>
  <!-- End of properties used as value for bundle manifest headers.   -->


  <!-- Special values for manifest headers of the api-version of a     -->
  <!-- bundle can be set by defining properties with the prefix        -->
  <!-- "bmfa.api-" E.g.                                                -->
  <!-- <property name="bmfa.api-Export-Package" value="org.kf.xx.yy"/> -->
  <!-- Prefixing with "api-" may also be used in the manifest template.-->
  <!-- The same prefixing rule applies for the lib- and the            -->
  <!-- impl-variants of a bundles.  -->


  <!-- The deault source directory to search.                          -->
  <property name="src.dir"        location="src"/>

  <!-- The deault resoruces directory to search.                       -->
  <property name="resources.dir"  location="resources"/>

  <!-- Directory to place all intermediate build products for this project. -->
  <property name="outdir"   location="${topdir}/out/${ant.project.name}"/>

  <!-- The root of the local bundle repository. -->
  <property name="jars.dir" location="${topdir}/jars"/>

  <!-- Subdirectory of jars.dir where this projects bundles shall live. -->
  <property name="jardir"   location="${jars.dir}/${ant.project.name}"/>

  <!-- The root if the local bundle docs direcotry. -->
  <property name="docs.dir" location="${topdir}/out/doc"/>

  <!-- Directory to place generate bundle documentation in. -->
  <property name="outdocdir"   location="${docs.dir}/${ant.project.name}"/>

  <!-- Location of templates used by the bundle_doc-target. -->
  <property name="bundledoc_template"
	    location="${ant.dir}/html_template/bundledoc.html"/>

  <!-- Name of file to record the name of all exported package in. -->
  <property name="exported.file" location="${topdir}/out/exported.txt"/>

  <!-- Name of file to record the soruce tree roots in. -->
  <property name="sources.file"  location="${topdir}/out/sources.txt"/>

  <!-- Where to store compiler output. -->
  <property name="classes.out.dir"     location="${outdir}/classes"/>

  <!-- If lib-verison of bundle shall be built or not. -->
  <property name="bundle.build.lib"    value="false"/>

  <!-- If api-verison of bundle shall be built or not. -->
  <property name="bundle.build.api"    value="true"/>

  <!-- If impl-verison of bundle shall be built or not. -->
  <property name="bundle.build.impl"   value="true"/>

  <!-- If all-verison of bundle shall be built or not. -->
  <property name="bundle.build.all"    value="true"/>

  <!-- If bundle-doc for bundle shall be built or not. -->
  <property name="bundle.build.doc"    value="false"/>

  <!-- Bundles that both export packages and provides implementations -->
  <!-- shall have the implicitImport flag set in the bundleinfo task. -->
  <property name="bundle.implicit.imports.lib"   value="false"/>
  <property name="bundle.implicit.imports.api"   value="false"/>
  <property name="bundle.implicit.imports.impl"  value="false"/>
  <property name="bundle.implicit.imports.all"   value="true"/>

  <!-- A comma separated list of packages that does not need to be imported. -->
  <!-- I.e., packages that are made available through the system classloader.-->
  <property name="bundle.stdimports"   value="java."/>

  <!-- A comma separated list of packages that needs to be imported even -->
  <!-- though that they are not explicitly referenced. -->
  <!-- E.g. classes loaded using reflection. -->
  <property name="bundle.extraimports"   value=""/>

  <!-- First part of the suffix to insert right before "-jar" in the -->
  <!-- name of jar files to create.                                  -->
  <!-- E.g. The full name of the impl-jar will be on the form:       -->
  <!--${jardir}/${ant.project.name}${impl.suffix.name}-${bmfa.Bundle-Version}-->
  <property name="lib.suffix.name"  value=""/>
  <property name="api.suffix.name"  value="_api"/>
  <property name="impl.suffix.name" value=""/>
  <property name="all.suffix.name"  value="_all"/>

  <!-- Manifest attributes that shall not be present in the manifest -->
  <!-- of the named bundle kind. The value is a comma separated list -->
  <!-- of manifest attibute names to weed out from the generated manifest. -->
  <property name="attrs.to.skip.lib"
	    value="Bundle-Activator,Export-Service,Import-Service,Bundle-Config"/>
  <property name="attrs.to.skip.api"
	    value="Bundle-Activator,Export-Service,Import-Service,Bundle-Config"/>
  <property name="attrs.to.skip.impl" value="Export-Package"/>
  <property name="attrs.to.skip.all"  value=""/>

  <!-- Let the bundlemanifest task print the name of the activator -->
  <!-- and the exported and imported packages on the console.      -->
  <property name="bundlemanifest.verbose" value="true"/>


  <!-- Path that finds the framework API packages. -->
  <path id = "framework.path">
    <pathelement location = "${osgi.dir}/framework.jar"/>
  </path>

  <!-- Default compile path for a bundle. The referenced path,    -->
  <!-- "bundle.compile.path" should be set in the build file that -->
  <!--  imports this file.                                        -->
  <path id = "bundle.path">
    <path refid = "framework.path"/>
    <path refid = "bundle.api.path"/>
    <path refid = "bundle.compile.path"/>
  </path>

  <import file="${ant.dir}/bundletasks.xml"/>

  <target name="init"
          depends="setup_build,check_bcel,bundle_tasks,setup_manifest_props">
    <tstamp>
      <format property="bundle.date"
              pattern="EE MMMM d yyyy, HH:mm:ss"
              locale="en"/>
    </tstamp>
  </target>

  <!-- This target must be called before using any of the bmfa.* properties.-->
  <target name="setup_manifest_props">
    <!-- If old bundle manifest property names are in use fail! -->
    <fail if="bundle.category" message="bundle.category->bmfa.Bundle-Category"/>
    <fail if="bundle.name" message="bundle.name->bmfa.Bundle-Name"/>
    <fail if="bundle.version" message="bundle.version->bmfa.Bundle-Version"/>
    <fail if="bundle.manifest.version"
          message="bundle.manifest.version->bmfa.Bundle-ManifestVersion"/>
    <fail if="bundle.classpath"
          message="bundle.classpath->bmfa.Bundle-Classpath"/>
    <fail if="bundle.contactaddress"
          message="bundle.contactaddress->bmfa.Bundle-ContactAddress"/>
    <fail if="bundle.copyright"
          message="bundle.copyright->bmfa.Bundle-Copyright"/>
    <fail if="bundle.description"
          message="bundle.description->bmfa.Bundle-Description"/>
    <fail if="bundle.docurl" message="bundle.docurl->bmfa.Bundle-DocURL"/>
    <fail if="bundle.localization"
          message="bundle.localization->bmfa.Bundle-Localization"/>
    <fail if="bundle.nativecode"
          message="bundle.nativecode->bmfa.Bundle-NativeCode"/>
    <fail if="bundle.requiredEE"
          message="bundle.requiredEE->bmfa.Bundle-RequiredExecutionEnvironment"/>
    <fail if="bundle.symbolicname"
          message="bundle.symbolicname->bmfa.Bundle-SymbolicName"/>
    <fail if="bundle.update.location"
          message="bundle.update.location->bmfa.Bundle-UpdateLocation"/>
    <fail if="bundle.vendor" message="bundle.vendor->bmfa.Bundle-Vendor"/>
    <fail if="dynamicimport.package"
          message="bundle.dynamicimport.package->bmfa.DynamicImport-Package"/>
    <fail if="export.service" message="export.service->bmfa.Export-Service"/>
    <fail if="import.service" message="import.service->bmfa.Import-Service"/>
    <fail if="export.package" message="export.package->bmfa.Export-Package"/>
    <fail if="import.package" message="import.package->bmfa.Import-Package"/>
    <fail if="fragment.host"  message="fragment.host->bmfa.Fragment-Host"/>
    <fail if="require.bundle" message="require.bundle->bmfa.Require-Bundle"/>
    <fail if="bundle.uuid"    message="bundle.uuid->bmfa.Bundle-UUID"/>
    <fail if="bundle.config"  message="bundle.config->bmfa.Bundle-Config"/>
    <fail if="bundle.icon"    message="bundle.icon->bmfa.Application-Icon"/>
    <fail if="bundle.subversionurl"
          message="bundle.subversionurl->bmfa.Bundle-SubversionURL"/>
    <fail if="bundle.apivendor"
          message="bundle.apivendor->bmfa.Bundle-APIVendor"/>
    <fail if="service.component"
          message="service.component->bmfa.Service-Component"/>

    <!-- Update value of all bundle manifest properties (bmfa.*) based  -->
    <!-- on their values in the manifest template file (if present). -->
    <bundlemanifest mode="templateOnly"
                    attributePropertyPrefix="${bundle.mf.attr.prefix}"
                    templateFile="${bundlemanifest.template}">
    </bundlemanifest>

    <!-- Defines properties that depends on bundle manifest header values. -->
    <property name="impl.suffix"
              value="${impl.suffix.name}-${bmfa.Bundle-Version}"/>
    <property name="impl.jar"
              location="${jardir}/${ant.project.name}${impl.suffix}.jar"/>
    <property name="api.suffix"
              value="${api.suffix.name}-${bmfa.Bundle-Version}"/>
    <property name="api.jar"
              location="${jardir}/${ant.project.name}${api.suffix}.jar"/>
    <property name="lib.suffix"
              value="${lib.suffix.name}-${bmfa.Bundle-Version}"/>
    <property name="lib.jar"
              location="${jardir}/${ant.project.name}${lib.suffix}.jar"/>
    <property name="all.suffix"
              value="${all.suffix.name}-${bmfa.Bundle-Version}"/>
    <property name="all.jar"
              location="${jardir}/${ant.project.name}${all.suffix}.jar"/>

    <available property="android.exists" file="${ANDROID_HOME}"/>

    <path id = "bundle.api.path">
      <pathelement location = "${api.jar}"/>
    </path>
  </target>

  <target name="all" depends="init" description="Builds the bundle.">
    <antcall inheritRefs="true" target="try_bundle.custom.pre"/>
    <antcall inheritRefs="true" target="jars"/>
    <antcall inheritRefs="true" target="try_bundle.custom.post"/>
  </target>

  <!-- Check for and execute customized pre-target for this bundle. -->
  <target name="try_bundle.custom.pre" if="do.bundle.custom.pre">
    <antcall inheritRefs="true" target="bundle.custom.pre"/>
  </target>

  <!-- Check for and execute customized post-target for this bundle. -->
  <target name="try_bundle.custom.post" if="do.bundle.custom.post">
    <antcall inheritRefs="true" target="bundle.custom.post"/>
  </target>

  <target name="compile" description="compiles all java sources"
	  if="src.dir.exists">
    <mkdir dir = "${classes.out.dir}"/>

    <bundle_locator classPathRef="bundle.path"
		    newClassPathId="bundle.path.Expanded"
		    failOnMissingBundles="true">
      <fileset dir="${osgi.dir}/jars">
	<include name="**/*.jar"/>
      </fileset>
      <fileset dir="${jars.dir}">
	<include name="**/*.jar"/>
      </fileset>
    </bundle_locator>

    <javac destdir       = "${classes.out.dir}"
           debug         = "on"
           srcdir        = "${src.dir}"
           target        = "${javac.target}"
           source        = "${javac.source}"
           classpathref  = "bundle.path.Expanded"
           includes      = "${impl.pattern},${impl-api.pattern},${api.pattern}"
    >
   </javac>
  </target>

  <target name="compile_api" description="Compiles api java sources"
	  if="src.dir.exists">
    <mkdir dir = "${classes.out.dir}"/>

    <bundle_locator classPathRef="bundle.path"
		    newClassPathId="bundle.path.Expanded"
		    failOnMissingBundles="false">
      <fileset dir="${osgi.dir}/jars">
	<include name="**/*.jar"/>
      </fileset>
      <fileset dir="${jars.dir}">
	<include name="**/*.jar"/>
      </fileset>
    </bundle_locator>

    <javac destdir       = "${classes.out.dir}"
           debug         = "on"
           srcdir        = "${src.dir}"
           classpathref  = "bundle.path.Expanded"
           target        = "${javac.target}"
           source        = "${javac.source}"
           includes      = "${api.pattern}">
    </javac>
  </target>

  <target name="jars" description="Compile all jars">
    <antcall target="jar_api0" inheritRefs="true"/>
    <antcall target="jar_lib"  inheritRefs="true"/>
    <antcall target="jar_impl" inheritRefs="true"/>
    <antcall target="jar_all0" inheritRefs="true"/>
  </target>

  <target name="jar_api0" if="api.pattern">
    <antcall target="jar_api" inheritRefs="true"/>
  </target>

  <target name="jar_all0" if="api.pattern">
    <antcall target="jar_all" inheritRefs="true"/>
  </target>

  <!-- set up build conditions -->
  <target name="setup_build">
    <condition property="do_build_lib">
      <equals arg1="${bundle.build.lib}"  arg2="true"/>
    </condition>
    <condition property="do_build_api" value="true">
      <and>
	<equals arg1="${bundle.build.api}"  arg2="true"/>
	<isset property="api.pattern"/>
      </and>
    </condition>
    <condition property="do_build_impl">
      <equals arg1="${bundle.build.impl}" arg2="true"/>
    </condition>
    <condition property="do_build_all" value="true">
      <and>
	<equals arg1="${bundle.build.all}"  arg2="true"/>
	<isset property="api.pattern"/>
      </and>
    </condition>
    <condition property="do_build_doc">
      <equals arg1="${bundle.build.doc}"  arg2="true"/>
    </condition>
    <condition property="do_include_source">
      <equals arg1="${include.source}"    arg2="true"/>
    </condition>

    <!-- If a template manifest file exists use it and ignore       -->
    <!-- manifest headers defined via properties in the build file. -->
    <condition property="bundlemanifest.mode" value="update">
      <and>
	<not><isset property="bundlemanifest.mode"/></not>
	<available type="file" file="${bundlemanifest.template}"/>
      </and>
    </condition>
    <property name="bundlemanifest.mode" value="replace"/>

    <available property="src.dir.exists"       file="${src.dir}"/>
    <available property="resources.dir.exists" file="${resources.dir}"/>

    <!-- Ensure that the compiler output dir exists (required since -->
    <!-- it is used as the "dir"-attribute in a <fileset>.    -->
    <mkdir dir = "${classes.out.dir}"/>
  </target>


  <!-- ============================= IMPL =============================== -->
  <target name    = "jar_impl"
          depends = "init,bundle_tasks,compile"
          if      = "do_build_impl">
    <echo message = "${impl.jar}"/>

    <!-- Use the impl version of manifest properties, define it if needed. -->
    <property name="bmfa.impl-Import-Package"   value="${bmfa.Import-Package}"/>
    <property name="bmfa.impl-Bundle-Activator" value="${bmfa.Bundle-Activator}"/>
    <!-- Create a file set for the Bundle-Classpath -->
    <bundleClasspathUtil BundleClasspath="${bmfa.Bundle-Classpath}"
			 dir="${resources.dir}"
			 filesetId="impl.bundleClasspath"/>

    <bundleinfo activator = "bmfa.impl-Bundle-Activator"
		imports   = "bmfa.impl-Import-Package"
		stdimports        = "${bundle.stdimports}"
		extraimports      = "${bundle.extraimports}"
		implicitImports   = "${bundle.implicit.imports.impl}"
		serviceComponent  = "${bmfa.Service-Component}"
		fragmentHost      = "${bmfa.Fragment-Host}"
		manifestVersion   = "${bmfa.Bundle-ManifestVersion}"
		uses              = "${bundleinfo.uses}"
		failOnExports     = "${bundleinfo.failOnExports}"
		failOnImports     = "${bundleinfo.failOnImports}"
		checkFoundationEE = "${ee.check.foundation}">
      <fileset dir      = "${classes.out.dir}"
               includes = "${impl.pattern},${impl-api.pattern}">
      </fileset>
      <fileset refid="impl.bundleClasspath"/>
    </bundleinfo>

    <mkdir dir = "${jardir}"/>

    <bundlemanifest kind="impl"
                    mode="${bundlemanifest.mode}"
                    mainAttributesToSkip="${attrs.to.skip.impl}"
                    attributePropertyPrefix="${bundle.mf.attr.prefix}"
                    templateFile="${bundlemanifest.template}"
                    verbose="${bundlemanifest.verbose}"
                    file="${outdir}/impl.mf">
      <attribute name="Build-Date"       value="${bundle.date}"/>
      <attribute name="Built-From"       value="${proj.dir}"/>
    </bundlemanifest>

    <jar basedir  = "${classes.out.dir}"
	 jarfile  = "${impl.jar}"
	 includes = "${impl.pattern},${impl-api.pattern}"
	 excludes = "**/pspbrwse.jbf"
	 manifest = "${outdir}/impl.mf">
    </jar>

    <antcall target="add_resources" inheritRefs="true">
      <param name="add.resource.jarfile"  value="${impl.jar}"/>
    </antcall>
    <antcall target="add_src_resources" inheritRefs="true">
      <param name="add.src.resource.jarfile"  value="${impl.jar}"/>
      <param name="add.src.resource.includes"
	     value="${impl.pattern},${impl-api.pattern}"/>
    </antcall>
    <antcall target="add_src" inheritRefs="true">
      <param name="add.src.jarfile"  value="${impl.jar}"/>
    </antcall>
    <antcall target="save_javadoc_data" inheritRefs="true">
      <param name="manifest.file"  value="${outdir}/impl.mf"/>
    </antcall>

   <antcall target="add_dex" inheritRefs="true">
     <param name="jarfile" value="${impl.jar}"/>
   </antcall>

  </target>


  <!-- ============================= API =============================== -->
  <target name    = "jar_api"
          depends = "init,bundle_tasks,compile_api"
          if      = "do_build_api">
    <echo message = "${api.jar}"/>

    <!-- If api-variant unspecified use the standard def. -->
    <property name="bmfa.api-Export-Package" value="${bmfa.Export-Package}"/>
    <!-- Note that bmfa.api-Import-Package must not inherit from   -->
    <!-- bmfa.Import-Package since we want to avoid importing      -->
    <!-- packages only required by the implementation.             -->
    <property name="bmfa.api-Import-Package" value="${bundle.emptystring}"/>
    <!-- Create a file set for the Bundle-Classpath -->
    <bundleClasspathUtil BundleClasspath="${bmfa.Bundle-Classpath}"
			 dir="${resources.dir}"
			 filesetId="api.bundleClasspath"/>

    <bundleinfo exports = "bmfa.api-Export-Package"
		imports = "bmfa.api-Import-Package"
		stdimports        = "${bundle.stdimports}"
		extraimports      = "${bundle.extraimports}"
		implicitImports   = "${bundle.implicit.imports.api}"
		serviceComponent  = "${bmfa.Service-Component}"
		fragmentHost      = "${bmfa.Fragment-Host}"
		manifestVersion   = "${bmfa.Bundle-ManifestVersion}"
		uses              = "${bundleinfo.uses}"
		failOnExports     = "${bundleinfo.failOnExports}"
		failOnImports     = "${bundleinfo.failOnImports}"
		checkFoundationEE = "${ee.check.foundation}">
      <fileset dir="${classes.out.dir}" includes="${api.pattern}"/>
      <fileset refid="api.bundleClasspath"/>
    </bundleinfo>

    <mkdir dir="${jardir}"/>

    <bundlemanifest mode="${bundlemanifest.mode}"
		    kind="api"
		    mainAttributesToSkip="${attrs.to.skip.api}"
		    attributePropertyPrefix="${bundle.mf.attr.prefix}"
		    templateFile="${bundlemanifest.template}"
		    verbose="${bundlemanifest.verbose}"
                    file="${outdir}/api.mf">
      <attribute name="Build-Date"       value="${bundle.date}"/>
      <attribute name="Built-From"       value="${proj.dir}"/>
    </bundlemanifest>

    <jar basedir  = "${classes.out.dir}"
	 jarfile  = "${api.jar}"
	 includes = "${api.pattern}"
	 manifest = "${outdir}/api.mf">
    </jar>

    <antcall target="add_src_resources" inheritRefs="true">
      <param name="add.src.resource.jarfile"  value="${api.jar}"/>
      <param name="add.src.resource.includes"
	     value="${api.pattern}"/>
    </antcall>
    <antcall target="add_src" inheritRefs="true">
      <param name="add.src.jarfile"  value="${api.jar}"/>
    </antcall>
    <antcall target="save_javadoc_data" inheritRefs="true">
      <param name="manifest.file"  value="${outdir}/api.mf"/>
    </antcall>

   <antcall target="add_dex" inheritRefs="true">
     <param name="jarfile" value="${api.jar}"/>
   </antcall>

  </target>

  <target name="add_dex" if="android.exists">
    <tempfile destdir="${outdir}" prefix="dex" property="temp.dir"/>
    <mkdir dir="${temp.dir}"/>
    
    <property name     = "android.libdir" 
              location = "${ANDROID_HOME}/tools/lib"/>
    
    <property name     = "dexlib.jar" 
              location = "${android.libdir}/dx.jar"/>
    
    <property name="classes.dex" value="classes.dex"/>
    
    <echo message="add_dex ${jarfile}"/>
    

    
    <property name="dx.cmd" value="${ANDROID_HOME}/tools/dx.bat"/>
    
    <java fork="true" jar="${dexlib.jar}">
      <arg value="--dex"/>
      <arg value="--output=${classes.dex}"/>
      <arg value="${jarfile}"/>
    </java>
    
    <property name="aapt.cmd" value="${ANDROID_HOME}/tools/aapt"/>
    
    <exec executable = "${aapt.cmd}">
      <arg value="add"/>
      <arg value="-f"/>
      <arg value="${jarfile}"/>
      <arg value="${classes.dex}"/>
    </exec>
    
<!--
    <delete dir="${temp.dir}"/>
-->
  </target>
  

  <!-- ============================= LIB =============================== -->
  <target name    = "jar_lib"
          depends = "init,bundle_tasks,compile_api"
          if      = "do_build_lib">
    <echo message = "${lib.jar}"/>

    <!-- Use the api version of manifest properties, define if needed. -->
    <property name="bmfa.lib-Import-Package" value="${bmfa.Import-Package}"/>
    <property name="bmfa.lib-Export-Package" value="${bmfa.Export-Package}"/>
    <!-- Create a file set include pattern for the Bundle-Classpath -->
    <bundleClasspathUtil BundleClasspath="${bmfa.Bundle-Classpath}"
			 dir="${resources.dir}"
			 filesetId="lib.bundleClasspath"/>

    <bundleinfo exports = "bmfa.lib-Export-Package"
		imports = "bmfa.lib-Import-Package"
		stdimports        = "${bundle.stdimports}"
		extraimports      = "${bundle.extraimports}"
		implicitImports   = "${bundle.implicit.imports.lib}"
		serviceComponent  = "${bmfa.Service-Component}"
		fragmentHost      = "${bmfa.Fragment-Host}"
		manifestVersion   = "${bmfa.Bundle-ManifestVersion}"
		uses              = "${bundleinfo.uses}"
		failOnExports     = "${bundleinfo.failOnExports}"
		failOnImports     = "${bundleinfo.failOnImports}"
		checkFoundationEE = "${ee.check.foundation}">
      <fileset dir="${classes.out.dir}" includes="${api.pattern}"/>
      <fileset refid="lib.bundleClasspath"/>
    </bundleinfo>

    <mkdir dir = "${jardir}"/>

    <bundlemanifest kind="lib"
                    mode="${bundlemanifest.mode}"
                    mainAttributesToSkip="${attrs.to.skip.lib}"
                    attributePropertyPrefix="${bundle.mf.attr.prefix}"
                    templateFile="${bundlemanifest.template}"
                    verbose="${bundlemanifest.verbose}"
                    file="${outdir}/lib.mf">
      <attribute name="Build-Date"     value="${bundle.date}"/>
      <attribute name="Built-From"     value="${proj.dir}"/>
      <attribute name="Export-Package" value="${bmfa.Export-Package}"/>
    </bundlemanifest>

    <jar basedir  = "${classes.out.dir}"
	 jarfile  = "${lib.jar}"
	 includes = "${api.pattern}"
	 manifest = "${outdir}/lib.mf">
    </jar>

    <antcall target="add_resources" inheritRefs="true">
      <param name="add.resource.jarfile"  value="${lib.jar}"/>
    </antcall>
    <antcall target="add_src_resources" inheritRefs="true">
      <param name="add.src.resource.jarfile"  value="${lib.jar}"/>
      <param name="add.src.resource.includes" value="${api.pattern}"/>
    </antcall>
    <antcall target="add_src" inheritRefs="true">
      <param name="add.src.jarfile"  value="${lib.jar}"/>
    </antcall>
    <antcall target="save_javadoc_data" inheritRefs="true">
      <param name="manifest.file"  value="${outdir}/lib.mf"/>
    </antcall>

   <antcall target="add_dex" inheritRefs="true">
     <param name="jarfile" value="${lib.jar}"/>
   </antcall>

  </target>


  <!-- ============================= ALL =============================== -->
  <target name    = "jar_all"
          depends = "init,bundle_tasks,compile"
          if      = "do_build_all">
    <echo message = "${all.jar}"/>

    <!-- Create a file set for the Bundle-Classpath -->
    <bundleClasspathUtil BundleClasspath="${bmfa.Bundle-Classpath}"
			 dir="${resources.dir}"
			 filesetId="all.bundleClasspath"/>

    <!-- Determine / validate set of packages to be exported. -->
    <bundleinfo exports="bmfa.Export-Package"
		stdimports="${bundle.stdimports}"
		manifestVersion="${bmfa.Bundle-ManifestVersion}"
		uses="${bundleinfo.uses}"
		failOnExports="${bundleinfo.failOnExports}"
		failOnImports="${bundleinfo.failOnImports}"
		checkFoundationEE="${ee.check.foundation}">
      <fileset dir      = "${classes.out.dir}"
               includes = "${api.pattern},${impl-api.pattern}">
      </fileset>
      <fileset refid="all.bundleClasspath"/>
    </bundleinfo>

    <bundleinfo activator = "bmfa.Bundle-Activator"
		imports   = "bmfa.Import-Package"
		exports   = "bmfa.Export-Package"
		stdimports        = "${bundle.stdimports}"
		extraimports      = "${bundle.extraimports}"
		implicitImports   = "${bundle.implicit.imports.all}"
		serviceComponent  = "${bmfa.Service-Component}"
		fragmentHost      = "${bmfa.Fragment-Host}"
		manifestVersion   = "${bmfa.Bundle-ManifestVersion}"
		uses              = "${bundleinfo.uses}"
		failOnExports     = "${bundleinfo.failOnExports}"
		failOnImports     = "${bundleinfo.failOnImports}"
		checkFoundationEE = "${ee.check.foundation}"
		importsOnly       = "true">
      <fileset dir      = "${classes.out.dir}"
               includes = "${api.pattern},${impl-api.pattern},${impl.pattern}">
      </fileset>
      <fileset refid="all.bundleClasspath"/>
    </bundleinfo>

    <mkdir dir = "${jardir}"/>

    <bundlemanifest kind=""
                    mode="${bundlemanifest.mode}"
                    mainAttributesToSkip="${attrs.to.skip.all}"
                    attributePropertyPrefix="${bundle.mf.attr.prefix}"
		    templateFile="${bundlemanifest.template}"
                    verbose="${bundlemanifest.verbose}"
                    file="${outdir}/all.mf">
      <attribute name="Build-Date"       value="${bundle.date}"/>
      <attribute name="Built-From"       value="${proj.dir}"/>
    </bundlemanifest>

    <jar basedir  = "${classes.out.dir}"
	 jarfile  = "${all.jar}"
	 compress = "true"
	 includes = "${api.pattern},${impl-api.pattern},${impl.pattern}"
	 excludes = "**/pspbrwse.jbf"
	 manifest = "${outdir}/all.mf">
    </jar>

    <antcall target="add_resources" inheritRefs="true">
      <param name="add.resource.jarfile"  value="${all.jar}"/>
    </antcall>
    <antcall target="add_src_resources" inheritRefs="true">
      <param name="add.src.resource.jarfile"  value="${all.jar}"/>
      <param name="add.src.resource.includes"
	     value="${api.pattern},${impl-api.pattern},${impl.pattern}"/>
    </antcall>
    <antcall target="add_src" inheritRefs="true">
      <param name="add.src.jarfile"  value="${all.jar}"/>
    </antcall>
    <antcall target="save_javadoc_data" inheritRefs="true">
      <param name="manifest.file"  value="${outdir}/all.mf"/>
    </antcall>

   <antcall target="add_dex" inheritRefs="true">
     <param name="jarfile" value="${all.jar}"/>
   </antcall>

  </target>


  <!-- Helper taget that adds files from the resources directory -->
  <!-- to a bundle. -->
  <target name="add_resources" if="resources.dir.exists">
    <jar jarfile="${add.resource.jarfile}" update="true">
      <fileset dir="${resources.dir}"/>
    </jar>
  </target>

  <!-- Helper taget that adds resources from the source tree to a bundle. -->
  <target name="add_src_resources" if="src.dir.exists">
    <jar jarfile="${add.src.resource.jarfile}" update="true">
      <fileset dir="${src.dir}"
               includes="${add.src.resource.includes}"
	       excludes="**/*.java,**/*.html"/>
    </jar>
  </target>

  <!-- Helper taget that adds sources from the source tree to a bundle. -->
  <target name="add_src" if="do_include_source">
    <jar jarfile="${add.src.jarfile}" update="true">
      <zipfileset dir="${src.dir}"
		  includes="**/*.java"
		  prefix="OSGI-OPT/src"/>
    </jar>
  </target>

  <target name="save_javadoc_data" if="generate.javadoc.data">
    <echo message="save_javadoc: to:${sources.file} src:${src.dir} "/>
    <echo file="${sources.file}" append="true"
	  message="${src.dir}${line.separator}"/>
    <!-- Load the generated manifest file (${manifest.file}) to get the -->
    <!-- actual export-package value used. -->
    <property name="save_javadoc_bmfa.Export-Package"
	      value="${bundle.emptystring}"/>
    <bundlemanifest mode="templateOnly"
                    attributePropertyPrefix="save_javadoc_bmfa."
                    templateFile="${manifest.file}">
    </bundlemanifest>
    <echo file="${exported.file}" append="true"
	  message="${save_javadoc_bmfa.Export-Package}${line.separator}"/>
  </target>

  <import file="${ant.dir}/console_interactions.xml"/>
  <import file="${ant.dir}/bundle_junit.xml"/>

  <target name="bundle_doc"
	  description="Creates bundle specific doc"
	  depends="setup_build,bundle_tasks,setup_manifest_props"
	  if="do_build_doc">
    <makehtml title="${bmfa.Bundle-Name}"
              description="${bmfa.Bundle-Description}"
              template="${bundledoc_template}"
              outdir="${outdocdir}"
	      manstyle="true">
      <fileset dir="doc">
	<include name="**/*.html"/>
      </fileset>
    </makehtml>

    <copy todir="${outdocdir}">
      <fileset dir="doc">
	<exclude name="**/*.html"/>
      </fileset>
    </copy>
  </target>

  <target name="clean" description="Deletes all generated files.">
    <delete dir="${outdir}" failonerror="false"/>
    <delete includeEmptyDirs="true" verbose="true" failonerror="false">
      <fileset dir="${jardir}">
	<include name="${ant.project.name}.jar" />
	<include name="${ant.project.name}-*.jar" />
	<include name="${ant.project.name}_all-*.jar" />
	<include name="${ant.project.name}_api-*.jar" />
	<include name="${ant.project.name}_lib-*.jar" />
      </fileset>
      <dirset dir="${jardir}" excludes="*,**/*"/>
    </delete>
  </target>

</project>
