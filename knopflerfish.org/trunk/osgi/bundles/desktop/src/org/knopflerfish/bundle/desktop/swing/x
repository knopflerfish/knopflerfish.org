package com.wistrand.application.panopticon.impl;

import javax.swing.*;
import java.awt.*;
import java.net.*;
import java.io.*;
import java.util.*;

import javax.media.jai.*;

import com.wistrand.application.panopticon.*;

public class Util {

  public static void close(OutputStream out) {
    if(out != null) {
      try { out.close(); } catch (Exception ignored) { }
    }
  }

  
  public static Properties loadProps(File f) throws IOException {
    Properties props = new Properties();
    InputStream in = null;
    in = new FileInputStream(f);
    props.load(in);
    
    if(in != null) {  try { in.close(); } catch(Exception ignored) { }  }

    return props;
  }

  static  MediaTracker tracker;

  static String getFilePart(String s) {
    int ix = s.lastIndexOf("/");
    if(ix == -1) {
      ix = s.lastIndexOf("\\");
    }
    if(ix != -1) {
      return s.substring(ix + 1);
    }
    return s;
  }

  static String getBasePart(String s) {
    int ix = s.lastIndexOf(".");
    if(ix != -1) {
      return s.substring(0, ix);
    }
    return s;
  }

  static String getShortInfo(Photo p) {
    StringBuffer sb = new StringBuffer();

    sb.append(p.get(Photo.PROP_NAME) + " " + 
	      p.get("width") + "x" + p.get("height"));

    String depth = p.get(Photo.PROP_DEPTH);
    
    if(depth != null && "".equals(depth)) {
      sb.append("x" + depth);
    }

    if(!"0".equals(p.get(Photo.PROP_ROTATION))) {
      sb.append(" rot=" + p.get(Photo.PROP_ROTATION));
    }
    if("true".equals(p.get(Photo.PROP_FLIPX))) {
      sb.append(" flippedX");
    }
    if("true".equals(p.get(Photo.PROP_FLIPY))) {
      sb.append(" flippedY");
    }
    return sb.toString();
  }
  
  public static void setIcon(Class clazz, JFrame frame, String baseName) {
    String iconName = baseName + "32x32.gif";
    if (System.getProperty( "os.name", "" ).startsWith("Win")) {
      iconName = baseName + "16x16.gif";
    }
    String strURL = iconName;
    try {
      URL url = clazz.getResource(strURL);
      
      if(url != null) {
	Image image = loadImage(frame, url);
	
	frame.setIconImage(image);
      } else {
	Main.log.warn("no icon: " + strURL);
      }
    } catch (Exception e) {
      Main.log.error("failed to set icon: " + strURL, e);
    }
  }

  static int imageCount = 0;

  public static Image loadImage(Component c, URL url) {
    if(tracker == null) {
      tracker = new MediaTracker(c);
    }

    try {
      // This is very slow sometimes - seems to be 
      // a name resolve on "bundle:".
      Image image = c.getToolkit().getImage(url);
      
      imageCount++;
      tracker.addImage(image, imageCount);
      tracker.waitForID(imageCount);

      return image;
    } catch (Exception e) {
      Main.log.warn("Failed to load " + url);
      return null;
    }
  }

  private static int     bufSize = 1024 * 2;
  private static byte [] buf     = new byte[bufSize];

  /**
   * Load an URL into a byte array.
   */
  public static byte [] loadURL(URL url) throws IOException {
    ByteArrayOutputStream bout = new ByteArrayOutputStream();
    BufferedInputStream   in   = new BufferedInputStream(url.openStream());
    int n;
    while ((n = in.read(buf)) > 0) {
      bout.write(buf, 0, n);
    }
    try { in.close(); } catch (Exception ignored) { } 
    return bout.toByteArray();
  }


  // StringBuffer (red.green.blue) -> Color
  static Hashtable colors = new Hashtable();
  
  static int maxK = 256;

  static Color rgbInterPolate(Color c1, Color c2, double k) {

    int K = (int)(maxK * k);

    if(c1 == null || c2 == null) {
      return Color.gray;
    }

    if(k == 0.0) return c1;
    if(k == 1.0) return c2;

    int r1 = c1.getRed();
    int g1 = c1.getGreen();
    int b1 = c1.getBlue();
    int r2 = c2.getRed();
    int g2 = c2.getGreen();
    int b2 = c2.getBlue();

    int r = (int)(r1 + (double)K * (r2 - r1) / maxK);
    int g = (int)(g1 + (double)K * (g2 - g1) / maxK);
    int b = (int)(b1 + (double)K * (b2 - b1) / maxK);

    Integer key = new Integer((r << 16) | (g << 8) | g);

    Color c = (Color)colors.get(key);
    if(c == null) {
      c = new Color(r, g, b);
      colors.put(key, c);
    }
    return c;
  }

  static Color rgbInterPolate2(Color c1, Color c2, double k) {

    if(c1 == null || c2 == null) {
      return Color.gray;
    }

    if(k == 0.0) return c1;
    if(k == 1.0) return c2;

    int r1 = c1.getRed();
    int g1 = c1.getGreen();
    int b1 = c1.getBlue();
    int r2 = c2.getRed();
    int g2 = c2.getGreen();
    int b2 = c2.getBlue();

    int r = (int)(r1 + (double)(r2 - r1));
    int g = (int)(g1 + (double)(g2 - g1));
    int b = (int)(b1 + (double)(b2 - b1));

    Color c = new Color(r, g, b);
    return c;
  }

  public static byte[] readFile(String filename) {
    int fileSize=0;
    RandomAccessFile fileH=null;
    
    // Opens the file for reading.
    try {
      fileH = new RandomAccessFile(filename, "r");
      fileSize = (int) fileH.length();
    } catch (IOException ioErr) {
      System.err.println("Cannot find " + filename);
      System.err.println(ioErr);
      System.exit(200);
    }

    // allocates the buffer large enough to hold entire file
    byte[] buf = new byte[fileSize];

    // reads all bytes of file
    int i=0;
    try {
       while (true) {
         try {
           buf[i++] = fileH.readByte();
         } catch (EOFException e) {
          break;
         }
       }
    } catch (IOException ioErr) {
     System.out.println("ERROR in reading of file"+filename);
    }

    return buf;
  }
}
