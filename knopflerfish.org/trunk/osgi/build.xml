<?xml version="1.0"?>

<project name="osgi" default="default">

  <!-- build properties -->

  <property name="topdir"          location="."/>
  <property name="osgi.dir"        location="."/>
  <property name="jars.dir"        location="jars"/>
  <property name="javadoc.out.dir" location="out/javadoc"/>

  <!-- The initial part of the URL to use for the default jars -->
  <!-- location in the remote xargs files.  -->
  <property name = "base.url" value="http://www.knopflerfish.org/releases"/>

 <path id="sources.path">
  <pathelement location="framework/src"/>
  <pathelement location="bundles/log/src"/>
  <pathelement location="bundles/cm/cm/src"/>
  <pathelement location="bundles/cm/cm_cmd/src"/>
  <pathelement location="bundles/device/device/src"/>
  <pathelement location="bundles/useradmin/src"/>
  <pathelement location="bundles/wireadmin/src"/>
  <pathelement location="bundles/component/src"/>
  <pathelement location="bundles/console/console/src"/>
  <pathelement location="bundles/console/consoletcp/src"/>
  <pathelement location="bundles/console/consoletty/src"/>
  <pathelement location="bundles/desktop/src"/>
  <pathelement location="bundles/event/src"/>
  <pathelement location="bundles/jsdk/src"/>
  <pathelement location="bundles/http/http/src"/>
  <pathelement location="bundles/io/io/src"/>
  <pathelement location="bundles/util/src"/>
  <pathelement location="bundles/demos/demo1/src"/>
  <pathelement location="bundles/position/src"/>
  <pathelement location="bundles/measurement/src"/>
  <pathelement location="bundles/provisioning/src"/>
  <pathelement location="bundles/prefs/src"/>
  <pathelement location="bundles/upnp/src"/>
  <pathelement location="bundles/metatype/metatype_api/src"/>
  <pathelement location="bundles/xml/xml/src"/>
  <pathelement location="bundles/trayicon/trayicon/src"/>
  <pathelement location="bundles/remotefw/src"/>
  <pathelement location="../ant/src"/>

  <pathelement location="bundles/metatype/kf_metatype/src"/>

  <pathelement location="bundles_opt/jini/jinidriver/src"/>
 </path>

 <property name  = "javadoc.packages"
           value = "javax.servlet,javax.servlet.http,org.knopflerfish.ant.taskdefs.bundle,org.knopflerfish.service.axis,org.knopflerfish.service.console,org.knopflerfish.service.demo1,org.knopflerfish.service.desktop,org.knopflerfish.service.dirdeployer,org.knopflerfish.service.junit,org.knopflerfish.service.ksoap,org.knopflerfish.service.log,org.knopflerfish.service.remotefw,org.knopflerfish.service.serial,org.knopflerfish.service.soap.demo1,org.knopflerfish.service.soap.remotefw,org.knopflerfish.service.trayicon,org.knopflerfish.service.um.ipam,org.knopflerfish.service.um.useradmin,org.knopflerfish.shared.cm,org.knopflerfish.util,org.knopflerfish.util.cm,org.knopflerfish.util.framework,org.knopflerfish.util.http,org.knopflerfish.util.metatype,org.knopflerfish.util.sort,org.knopflerfish.util.workerthread,org.ksoap2,org.ksoap2.serialization,org.ksoap2.transport,org.kxml2.io,org.kxml2.wap,org.kxml2.wap.syncml,org.osgi.framework,org.osgi.service.cm,org.osgi.service.component,org.osgi.service.condpermadmin,org.osgi.service.device,org.osgi.service.event,org.osgi.service.http,org.osgi.service.io,org.osgi.service.jini,org.osgi.service.log,org.osgi.service.metatype,org.osgi.service.packageadmin,org.osgi.service.permissionadmin,org.osgi.service.prefs,org.osgi.service.provisioning,org.osgi.service.startlevel,org.osgi.service.upnp,org.osgi.service.url,org.osgi.service.useradmin,org.osgi.service.wireadmin,org.osgi.util,org.osgi.util.measurement,org.osgi.util.position,org.osgi.util.tracker,org.osgi.util.xml"/>

  <import file="${topdir}/../ant/bundletasks.xml"/>

  <!-- targets -->
  <target name="init">
    <available property="dir.bundles_opt.present"  file="bundles_opt"/>
    <available property="dir.bundles_test.present" file="bundles_test"/>
  </target>

  <target name="default"
          description = "Builds the framework and bundles in bundles-directory"
          depends     = "init,bundle_tasks">
    <ant dir="framework"    target="all"/>
    <ant dir="bundles"      target="all"/>
    <antcall inheritAll="true" target="xargs"/>
  </target>

  <target name="all"
          description="Builds the framework and all bundles including optional and test bundles"
          depends     = "default,bundles_opt,bundles_test">
  </target>

  <target name="bundles_opt" depends="init">
   <fail unless  = "dir.bundles_opt.present" 
         message = "The directory for optional bundles, bundles_opt, is missing. Please download Knopflerfish_opt_&lt;version&gt;.jar and install it in the same directory as Knopflerfish_osgi_&lt;version&gt;.jar"/>
    <ant dir="bundles_opt"  target="all"/>
    <antcall target="xargs"/>
  </target>

  <target name="bundles_test"
	  depends="init,bundles_test_missing,bundles_test_present" />
  <target name="bundles_test_present" if="dir.bundles_test.present">
    <ant dir="bundles_test" target="all"
         inheritAll="false" inheritRefs="false"/>
    <antcall target="xargs"/>
  </target>
  <target name="bundles_test_missing" unless="dir.bundles_test.present">
   <echo level="warning"
	 message="The directory for regression test bundles, bundles_test, is missing, skipping test bundles. To build test bundles use subversion to check out the complete knopflerfish.org tree."/>
  </target>


  <target name="xargs" depends="init,bundle_tasks">
    <property name="bundleVersionFilter" location="out/bundleVersions.props"/>
    <property name="xargs.jars.pattern"  value="**/*.jar"/>
    <bundle_locator replacefilterfile="${bundleVersionFilter}">
      <fileset dir="${jars.dir}">
	<include name="${xargs.jars.pattern}"/>
      </fileset>
    </bundle_locator>
    <antcall target="minimal_xargs"/>
    <antcall target="init_xargs"/>
    <antcall target="remote_xargs"/>
    <antcall target="osgi_test_xargs"/>
    <antcall target="test_xargs"/>
  </target>

  <target name="minimal_xargs">
   <copy file="minimal.xargs.in"
	 tofile="${osgi.dir}/minimal.xargs"
	 overwrite="true"/>
   <replace file="${osgi.dir}/minimal.xargs"
	    replacefilterfile="${bundleVersionFilter}">
     <replacefilter token = "$(JAR_PREFIX)" 
                    value = "file:jars/"/>
     <replacefilter token="$(VERSION)"         value="${version}"/>
     <replacefilter token="$(WINDOWS_BUNDLES)" value=""/>
   </replace>	  
  </target>

  <target name="remote_xargs">
   <copy file="template.xargs.in"
	 tofile="${osgi.dir}/remote-init.xargs"
	 overwrite="true"/>
   <replace file="${osgi.dir}/remote-init.xargs"
	    replacefilterfile="${bundleVersionFilter}">
     <replacefilter token = "$(JAR_PREFIX)" 
                    value = "${base.url}/${version}/osgi/jars/"/>
     <replacefilter token="$(VERSION)"     value="${version}"/>
     <replacefilter token="$(WINDOWS_BUNDLES)" value=""/>
   </replace>	  
  </target>

  <target name="init_xargs">
   <copy file="template.xargs.in"
	 tofile="${osgi.dir}/init.xargs"
	 overwrite="true"/>

   <replace file="${osgi.dir}/init.xargs"
	    replacefilterfile="${bundleVersionFilter}">
     <replacefilter token = "$(JAR_PREFIX)" 
                    value = "file:jars/"/>
     <replacefilter token="$(VERSION)"         value="${version}"/>
     <replacefilter token="$(WINDOWS_BUNDLES)" value=""/>
   </replace>	  

   <antcall target="init_xargs_windows">
    <param name="osname" value="WindowsXP"/>
   </antcall>

   <antcall target="init_xargs_windows">
    <param name="osname" value="Windows2000"/>
   </antcall>
  </target>

  <target name="init_xargs_windows">
   <echo message="create init_${osname}.xargs"/>
   <copy file="template.xargs.in"
	 tofile="${osgi.dir}/init_${osname}.xargs"
	 overwrite="true"/>
   <replace file="${osgi.dir}/init_${osname}.xargs"
	    replacefilterfile="${bundleVersionFilter}">
     <replacefilter token = "$(JAR_PREFIX)" 
                    value = "file:jars/"/>
     <replacefilter token="$(VERSION)"     value="${version}"/>

     <replacetoken><![CDATA[$(WINDOWS_BUNDLES)]]></replacetoken>
     <replacevalue><![CDATA[
## Windows platforms are likely to support tray icons
-initlevel 1
-istart @trayicon_all-N.N.N.jar@
-istart @trayicon_fw-N.N.N.jar@
]]></replacevalue>

   </replace>	  
  </target>

  <target name="osgi_test_xargs">
   <copy file="init-osgi-test-target.xargs.in"
	 tofile="${osgi.dir}/init-osgi-test-target.xargs"
	 overwrite="true"/>
   <replace file="${osgi.dir}/init-osgi-test-target.xargs"
	    replacefilterfile="${bundleVersionFilter}">
   </replace>	  
  </target>

  <target name="test_xargs">
    <property name="bundleVersionFilterTest"
	      location="out/bundleVersionsTest.props"/>
    <property name="test_xargs.jars.pattern"
	      value="jars/**/*.jar"/>
    <property name="test_xargs.test.jars.pattern"
	      value="bundles_test/regression_tests/jars/**/*.jar"/>
    <bundle_locator replacefilterfile="${bundleVersionFilterTest}">
      <fileset dir="${osgi.dir}">
	<include name="${test_xargs.jars.pattern}"/>
	<include name="${test_xargs.test.jars.pattern}"/>
      </fileset>
    </bundle_locator>
    <copy file="init-tests.xargs.in"
	  tofile="${osgi.dir}/init-tests.xargs"
	  overwrite="true"/>
    <replace file="${osgi.dir}/init-tests.xargs"
	     replacefilterfile="${bundleVersionFilterTest}">
      <replacefilter token="$(JAR_PREFIX)"      value="file:"/>
      <replacefilter token="$(VERSION)"         value=""/>
      <replacefilter token="$(WINDOWS_BUNDLES)" value=""/>
    </replace>	  
 </target>


 <target name="javadoc">
  <mkdir dir="${javadoc.out.dir}"/>

  <property name  = "javadoc.header"
            value = "Knopflerfish OSGi ${version}"/>
	    
  <property name  = "javadoc.footer"
            value = "${javadoc.header}"/>

  <javadoc sourcepathref = "sources.path"
           destdir       = "${javadoc.out.dir}"
           header        = "${javadoc.header}"
           footer        = "${javadoc.footer}"
	   packagenames  = "${javadoc.packages}"
	   excludepackagenames = "${javadoc.excludepackages}"
   >	   
  </javadoc>
 </target>
 
 <target name="run"
         description="(Re)start the framework.">
  <java fork="true"
        jar="framework.jar">
  </java>
 </target>

 <target name="run-secure"
         description="(Re)start framework with security enabled.">
  <java fork="true"
        jar="framework.jar">
    <jvmarg value="-Djava.security.manager"/>
    <jvmarg value="-Djava.security.policy=framework.policy"/>
  </java>
 </target>

 <target name="run-init"
         description="Initial start with default set of bundles.">
   <java fork="true"
         jar="framework.jar" >
     <arg value="-init"/>
   </java>
 </target>

 <target name="run-secure-init"
         description="Initial start with security enabled and default set of bundles.">
   <java fork="true"
         jar="framework.jar">
     <jvmarg value="-Djava.security.manager"/>
     <jvmarg value="-Djava.security.policy=framework.policy"/>
     <arg value="-init"/>
   </java>
 </target>

 <target name="run-osgi-test-target"
         description="Start the framework in OSGi test target mode.">
  <java fork="true"
        jar="framework.jar"
  >
    <arg line="-xargs init-osgi-test-target.xargs"/>
  </java>
 </target>

 <target name="run-osgi-test-target-secure"
         description="Start the framework with security enabled in OSGi test target mode.">
  <java fork="true"
        jar="framework.jar"
  >
    <jvmarg value="-Djava.security.manager"/>
    <jvmarg value="-Djava.security.policy=file:framework.policy"/>
    <arg line="-xargs init-osgi-test-target.xargs"/>
  </java>
 </target>

 <target name="run-kf-tests"
         description="Builds then executes the KF testsuite."
	 depends="clean,all">
   <antcall target="run-kf-tests-bare"/>
 </target>

 <target name="run-kf-tests-bare">
   <delete dir="junit_grunt"/>
   <mkdir dir="junit_grunt"/>
   <echo message="Running the main test suite..."/>
   <!-- Run most of the test suites. -->
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="false"
         jar="framework.jar">
     <arg value="-xargs"/>
     <arg value="init-tests.xargs"/>
   </java>
   <!-- Run Axis2 client test. -->
   <echo message="Running the SOAP-Axis2TestSuite..."/>
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="true"
         jar="framework.jar">
     <arg value="-xargs"/>
     <arg value="bundles_test/regression_tests/axis2_soapclient_adb/soapcline_adb_test.xargs"/>
   </java>
   <!-- Set up for the restart test suite. -->
   <echo message="Running the restart test suite, part 1..."/>
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="true"
	 jar="framework.jar">
     <arg value="-xargs"/>
     <arg value="bundles_test/regression_tests/restart_test/test-restart1.xargs"/>
   </java>
   <!-- Restart and check that the same set of bundles are started. -->
   <echo message="Running the restart test suite, part 2..."/>
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="true"
	 jar="framework.jar">
     <arg value="-xargs"/>
     <arg value="bundles_test/regression_tests/restart_test/test-restart2.xargs"/>
   </java>
   <echo message="Test output is available in junit_grunt/out.txt."/>
   <echo message="Test results are available in junit_grunt/index.xml"/>
 </target>

 <target name="run-kf-tests-secure"
         description="Builds then executes the KF testsuite with security enabled."
	 depends="clean,all">
   <antcall target="run-kf-tests-secure-bare"/>
 </target>

 <target name="run-kf-tests-secure-bare">
   <delete dir="junit_grunt"/>
   <mkdir  dir="junit_grunt"/>
   <echo message="Running the main test suite..."/>
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="false"
	 jar="framework.jar">
     <jvmarg value="-Djava.security.manager"/>
     <jvmarg value="-Djava.security.policy=framework.policy"/>
     <arg value="-xargs"/>
     <arg value="init-tests.xargs"/>
   </java>
   <!-- Run Axis2 client test. -->
   <echo message="Running the SOAP-Axis2TestSuite..."/>
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="true"
         jar="framework.jar">
     <jvmarg value="-Djava.security.manager"/>
     <jvmarg value="-Djava.security.policy=framework.policy"/>
     <arg value="-xargs"/>
     <arg value="bundles_test/regression_tests/axis2_soapclient_adb/soapcline_adb_test.xargs"/>
   </java>
   <!-- Set up for the restart test suite. -->
   <echo message="Running the restart test suite, part 1..."/>
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="true"
	 jar="framework.jar">
     <jvmarg value="-Djava.security.manager"/>
     <jvmarg value="-Djava.security.policy=framework.policy"/>
     <arg value="-xargs"/>
     <arg value="bundles_test/regression_tests/restart_test/test-restart1.xargs"/>
   </java>
   <!-- Restart and check that the same set of bundles are started. -->
   <echo message="Running the restart test suite, part 2..."/>
   <java fork="true"
	 output="junit_grunt/out.txt"
	 append="true"
	 jar="framework.jar">
     <jvmarg value="-Djava.security.manager"/>
     <jvmarg value="-Djava.security.policy=framework.policy"/>
     <arg value="-xargs"/>
     <arg value="bundles_test/regression_tests/restart_test/test-restart2.xargs"/>
   </java>
   <echo message="Test output is available in junit_grunt/out.txt."/>
   <echo message="Test results are available in junit_grunt/index.xml."/>
 </target>

 <target name="clean"
	 description="removes all generated files"
	 depends="init,clean_bundles_test">
  <delete file="framework.jar"/>
  <delete dir="out"/>
  <delete dir="jars"/>
  <delete dir="../ant/classes"/>
  <delete file="minimal.xargs"/>
  <delete file="remote-init.xargs"/>
  <delete file="init.xargs"/>
  <delete file="init_Windows2000.xargs"/>
  <delete file="init_WindowsXP.xargs"/>
  <delete file="init-tests.xargs"/>
  <delete file="init-osgi-tests-target.xargs"/>
 </target>

 <target name="clean_bundles_test" if="dir.bundles_test.present">
   <ant dir="bundles_test" target="clean"
        inheritAll="false" inheritRefs="false"/>
 </target>

 <target name="rebuild"
         description="Cleans then build build all">
    <antcall target="clean"/>
    <ant dir="bundles_test" target="clean"
         inheritAll="false" inheritRefs="false"/>
    <antcall target="all"/>
 </target>
 

 <target name="bundle_doc"
         description="Builds bundle specific docs">
   <ant dir="bundles"	   target="bundle_doc"/>
   <ant dir="bundles_opt"  target="bundle_doc"/>
 </target>
 
</project>
